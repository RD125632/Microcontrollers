
TI3B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b5  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000331  00000000  00000000  00000cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bf  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000246  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049e  00000000  00000000  000018e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	de c0       	rjmp	.+444    	; 0x1d2 <__vector_5>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__vector_6>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	fe d0       	rcall	.+508    	; 0x2a6 <main>
  aa:	0d c1       	rjmp	.+538    	; 0x2c6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_command>:
}

// Scroll Text to Left
void lcd_scrollLeft()
{
	lcd_command(0x1c);
  ae:	98 2f       	mov	r25, r24
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 bb       	out	0x15, r25	; 21
  b4:	ab 9a       	sbi	0x15, 3	; 21
  b6:	e9 ef       	ldi	r30, 0xF9	; 249
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_command+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_command+0x12>
  c0:	00 00       	nop
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	95 bb       	out	0x15, r25	; 21
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	ab 9a       	sbi	0x15, 3	; 21
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_command+0x2e>
  dc:	00 00       	nop
  de:	15 ba       	out	0x15, r1	; 21
  e0:	08 95       	ret

000000e2 <lcd_writeChar>:
  e2:	98 2f       	mov	r25, r24
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	95 bb       	out	0x15, r25	; 21
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	9c 60       	ori	r25, 0x0C	; 12
  ec:	95 bb       	out	0x15, r25	; 21
  ee:	e9 ef       	ldi	r30, 0xF9	; 249
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_writeChar+0x10>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_writeChar+0x16>
  f8:	00 00       	nop
  fa:	94 e0       	ldi	r25, 0x04	; 4
  fc:	95 bb       	out	0x15, r25	; 21
  fe:	f0 e1       	ldi	r31, 0x10	; 16
 100:	8f 9f       	mul	r24, r31
 102:	c0 01       	movw	r24, r0
 104:	11 24       	eor	r1, r1
 106:	85 bb       	out	0x15, r24	; 21
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	8c 60       	ori	r24, 0x0C	; 12
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	89 ef       	ldi	r24, 0xF9	; 249
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_writeChar+0x30>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_writeChar+0x36>
 118:	00 00       	nop
 11a:	15 ba       	out	0x15, r1	; 21
 11c:	e5 ea       	ldi	r30, 0xA5	; 165
 11e:	fe e0       	ldi	r31, 0x0E	; 14
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_writeChar+0x3e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_writeChar+0x44>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <lcd_clear>:
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	c0 df       	rcall	.-128    	; 0xae <lcd_command>
 12e:	85 ea       	ldi	r24, 0xA5	; 165
 130:	9e e0       	ldi	r25, 0x0E	; 14
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_clear+0x8>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_clear+0xe>
 138:	00 00       	nop
 13a:	08 95       	ret

0000013c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f e7       	ldi	r18, 0x7F	; 127
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <lcd_init+0x6>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x10>
 14c:	00 00       	nop

// Initialisation
void lcd_init()
{
	_delay_ms(400);         // wait 300 ms for initialisation
	lcd_command( 0x02 );    // return home
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	ae df       	rcall	.-164    	; 0xae <lcd_command>
 152:	85 ea       	ldi	r24, 0xA5	; 165
 154:	9e e0       	ldi	r25, 0x0E	; 14
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x1a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_init+0x20>
 15c:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x28 );    // set mode to: 4 bits interface data, 2 lines, 5x8 dots
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	a6 df       	rcall	.-180    	; 0xae <lcd_command>
 162:	85 ea       	ldi	r24, 0xA5	; 165
 164:	9e e0       	ldi	r25, 0x0E	; 14
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x2a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0x30>
 16c:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x0C );    // display: on, cursor off, blinking off
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	9e df       	rcall	.-196    	; 0xae <lcd_command>
 172:	85 ea       	ldi	r24, 0xA5	; 165
 174:	9e e0       	ldi	r25, 0x0E	; 14
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x3a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x40>
 17c:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x06 );    // entry mode: cursor to right, no shift
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	96 df       	rcall	.-212    	; 0xae <lcd_command>
 182:	85 ea       	ldi	r24, 0xA5	; 165
 184:	9e e0       	ldi	r25, 0x0E	; 14
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x4a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x50>
 18c:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x80 );    // RAM address: 0, first position, line 1
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	8e df       	rcall	.-228    	; 0xae <lcd_command>
 192:	85 ea       	ldi	r24, 0xA5	; 165
 194:	9e e0       	ldi	r25, 0x0E	; 14
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x5a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x60>
 19c:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x01 );    // Clear
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	86 df       	rcall	.-244    	; 0xae <lcd_command>
 1a2:	87 ea       	ldi	r24, 0xA7	; 167
 1a4:	91 e6       	ldi	r25, 0x61	; 97
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init+0x6a>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_init+0x70>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <wait>:
#include "lcd.h"
unsigned int currentNumber = 0;

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 1b0:	18 16       	cp	r1, r24
 1b2:	19 06       	cpc	r1, r25
 1b4:	6c f4       	brge	.+26     	; 0x1d0 <wait+0x20>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	e9 ef       	ldi	r30, 0xF9	; 249
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <wait+0xe>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <wait+0x14>
 1c4:	00 00       	nop
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
 1ce:	a9 f7       	brne	.-22     	; 0x1ba <wait+0xa>
 1d0:	08 95       	ret

000001d2 <__vector_5>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

ISR( INT4_vect )
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	0b b6       	in	r0, 0x3b	; 59
 1de:	0f 92       	push	r0
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	lcd_clear();
 1f8:	98 df       	rcall	.-208    	; 0x12a <lcd_clear>
	currentNumber--;
 1fa:	80 91 00 01 	lds	r24, 0x0100
 1fe:	90 91 01 01 	lds	r25, 0x0101
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	90 93 01 01 	sts	0x0101, r25
 208:	80 93 00 01 	sts	0x0100, r24
	unsigned char c = currentNumber + '0';
	
	lcd_writeChar(c);
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	69 df       	rcall	.-302    	; 0xe2 <lcd_writeChar>
	wait(100);
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	cd df       	rcall	.-102    	; 0x1b0 <wait>
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_6>:

ISR( INT5_vect )
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	0b b6       	in	r0, 0x3b	; 59
 248:	0f 92       	push	r0
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	lcd_clear();
 262:	63 df       	rcall	.-314    	; 0x12a <lcd_clear>
	currentNumber++;
 264:	80 91 00 01 	lds	r24, 0x0100
 268:	90 91 01 01 	lds	r25, 0x0101
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 01 01 	sts	0x0101, r25
 272:	80 93 00 01 	sts	0x0100, r24
	unsigned char c = currentNumber + '0';
	lcd_writeChar(c);
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	34 df       	rcall	.-408    	; 0xe2 <lcd_writeChar>
	wait(100);
 27a:	84 e6       	ldi	r24, 0x64	; 100
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	98 df       	rcall	.-208    	; 0x1b0 <wait>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <main>:

int main(void)
{
	currentNumber = 0;
 2a6:	10 92 01 01 	sts	0x0101, r1
 2aa:	10 92 00 01 	sts	0x0100, r1
	DDRC = 0b11111111;					// PORTD all output
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	84 bb       	out	0x14, r24	; 20
	DDRE = 0b00000000;					// PORTE all input
 2b2:	12 b8       	out	0x02, r1	; 2
	
	EICRB |= 0b000001010;
 2b4:	8a b7       	in	r24, 0x3a	; 58
 2b6:	8a 60       	ori	r24, 0x0A	; 10
 2b8:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0b000110000;
 2ba:	89 b7       	in	r24, 0x39	; 57
 2bc:	80 63       	ori	r24, 0x30	; 48
 2be:	89 bf       	out	0x39, r24	; 57
	sei();
 2c0:	78 94       	sei

	lcd_init();
 2c2:	3c df       	rcall	.-392    	; 0x13c <lcd_init>

    while (1) 
    {
    }
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <main+0x1e>

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
