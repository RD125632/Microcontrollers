
TI3B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000238  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077d  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000305  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000406  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000229  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000293  00000000  00000000  00001549  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	9a d0       	rcall	.+308    	; 0x1e8 <main>
  b4:	bf c0       	rjmp	.+382    	; 0x234 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
}

// Scroll Text to Left
void lcd_scrollLeft()
{
	lcd_command(0x1c);
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
  be:	ab 9a       	sbi	0x15, 3	; 21
  c0:	e9 ef       	ldi	r30, 0xF9	; 249
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <lcd_writeChar>:
  ec:	98 2f       	mov	r25, r24
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	95 bb       	out	0x15, r25	; 21
  f2:	95 b3       	in	r25, 0x15	; 21
  f4:	9c 60       	ori	r25, 0x0C	; 12
  f6:	95 bb       	out	0x15, r25	; 21
  f8:	e9 ef       	ldi	r30, 0xF9	; 249
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_writeChar+0x10>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_writeChar+0x16>
 102:	00 00       	nop
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	95 bb       	out	0x15, r25	; 21
 108:	f0 e1       	ldi	r31, 0x10	; 16
 10a:	8f 9f       	mul	r24, r31
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	85 bb       	out	0x15, r24	; 21
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	85 bb       	out	0x15, r24	; 21
 118:	89 ef       	ldi	r24, 0xF9	; 249
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_writeChar+0x30>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_writeChar+0x36>
 122:	00 00       	nop
 124:	15 ba       	out	0x15, r1	; 21
 126:	e5 ea       	ldi	r30, 0xA5	; 165
 128:	fe e0       	ldi	r31, 0x0E	; 14
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_writeChar+0x3e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_writeChar+0x44>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <lcd_setLine>:
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 05       	cpc	r25, r1
 138:	39 f0       	breq	.+14     	; 0x148 <lcd_setLine+0x14>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	91 05       	cpc	r25, r1
 13e:	31 f0       	breq	.+12     	; 0x14c <lcd_setLine+0x18>
 140:	89 2b       	or	r24, r25
 142:	31 f4       	brne	.+12     	; 0x150 <lcd_setLine+0x1c>
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	b8 df       	rcall	.-144    	; 0xb8 <lcd_command>
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	b6 df       	rcall	.-148    	; 0xb8 <lcd_command>
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	b4 df       	rcall	.-152    	; 0xb8 <lcd_command>
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	b2 cf       	rjmp	.-156    	; 0xb8 <lcd_command>
 154:	08 95       	ret

00000156 <display_text>:
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	8c 01       	movw	r16, r24
 160:	cb 01       	movw	r24, r22
 162:	e8 df       	rcall	.-48     	; 0x134 <lcd_setLine>
 164:	e8 01       	movw	r28, r16
 166:	00 5f       	subi	r16, 0xF0	; 240
 168:	1f 4f       	sbci	r17, 0xFF	; 255
 16a:	89 91       	ld	r24, Y+
 16c:	bf df       	rcall	.-130    	; 0xec <lcd_writeChar>
 16e:	c0 17       	cp	r28, r16
 170:	d1 07       	cpc	r29, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <display_text+0x14>
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <lcd_scrollRight>:
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	9b cf       	rjmp	.-202    	; 0xb8 <lcd_command>
 182:	08 95       	ret

00000184 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f e7       	ldi	r18, 0x7F	; 127
 186:	88 e3       	ldi	r24, 0x38	; 56
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <lcd_init+0x6>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x10>
 194:	00 00       	nop

// Initialisation
void lcd_init()
{
	_delay_ms(400);         // wait 300 ms for initialisation
	lcd_command( 0x02 );    // return home
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	8f df       	rcall	.-226    	; 0xb8 <lcd_command>
 19a:	85 ea       	ldi	r24, 0xA5	; 165
 19c:	9e e0       	ldi	r25, 0x0E	; 14
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x1a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x20>
 1a4:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x28 );    // set mode to: 4 bits interface data, 2 lines, 5x8 dots
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	87 df       	rcall	.-242    	; 0xb8 <lcd_command>
 1aa:	85 ea       	ldi	r24, 0xA5	; 165
 1ac:	9e e0       	ldi	r25, 0x0E	; 14
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x2a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init+0x30>
 1b4:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x0C );    // display: on, cursor off, blinking off
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	7f df       	rcall	.-258    	; 0xb8 <lcd_command>
 1ba:	85 ea       	ldi	r24, 0xA5	; 165
 1bc:	9e e0       	ldi	r25, 0x0E	; 14
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x3a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_init+0x40>
 1c4:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x06 );    // entry mode: cursor to right, no shift
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	77 df       	rcall	.-274    	; 0xb8 <lcd_command>
 1ca:	85 ea       	ldi	r24, 0xA5	; 165
 1cc:	9e e0       	ldi	r25, 0x0E	; 14
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x4a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_init+0x50>
 1d4:	00 00       	nop
	_delay_ms(15);
	lcd_command( 0x80 );    // RAM address: 0, first position, line 1
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	6f df       	rcall	.-290    	; 0xb8 <lcd_command>
 1da:	87 ea       	ldi	r24, 0xA7	; 167
 1dc:	91 e6       	ldi	r25, 0x61	; 97
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x5a>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x60>
 1e4:	00 00       	nop
 1e6:	08 95       	ret

000001e8 <main>:
#include <util/delay.h>

#include "lcd.h"

int main(void)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	68 97       	sbiw	r28, 0x18	; 24
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0b11111111;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	84 bb       	out	0x14, r24	; 20

	char sampleString[] = "This is a sample string";
 200:	88 e1       	ldi	r24, 0x18	; 24
 202:	e0 e0       	ldi	r30, 0x00	; 0
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	de 01       	movw	r26, r28
 208:	11 96       	adiw	r26, 0x01	; 1
 20a:	01 90       	ld	r0, Z+
 20c:	0d 92       	st	X+, r0
 20e:	8a 95       	dec	r24
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x22>

	lcd_init();
 212:	b8 df       	rcall	.-144    	; 0x184 <lcd_init>
	display_text(sampleString,0);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	9c df       	rcall	.-200    	; 0x156 <display_text>

    while (1) 
    {
		lcd_scrollRight();
 21e:	af df       	rcall	.-162    	; 0x17e <lcd_scrollRight>
 220:	2f eb       	ldi	r18, 0xBF	; 191
 222:	87 e2       	ldi	r24, 0x27	; 39
 224:	99 e0       	ldi	r25, 0x09	; 9
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x3e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x48>
 230:	00 00       	nop
 232:	f5 cf       	rjmp	.-22     	; 0x21e <main+0x36>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
