
TI3B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059a  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000164  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000299  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b2  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	6c d0       	rcall	.+216    	; 0x172 <main>
  9a:	91 c0       	rjmp	.+290    	; 0x1be <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <lcd_command>:
    }
}

void lcd_command(unsigned char dat)
{
	PORTC = dat & 0XF0;
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;
  a4:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	e9 ef       	ldi	r30, 0xF9	; 249
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0xc>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_command+0x12>
  b0:	00 00       	nop

	_delay_ms(1);
	PORTC = 0x04;
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) << 4;
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;
  c0:	ab 9a       	sbi	0x15, 3	; 21
  c2:	89 ef       	ldi	r24, 0xF9	; 249
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_command+0x28>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_command+0x2e>
  cc:	00 00       	nop

	_delay_ms(1);
	PORTC = 0x00;
  ce:	15 ba       	out	0x15, r1	; 21
  d0:	08 95       	ret

000000d2 <lcd_writeChar>:
}

void lcd_writeChar( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
  d2:	98 2f       	mov	r25, r24
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C; // data (RS=1), // start (EN=1)
  d8:	95 b3       	in	r25, 0x15	; 21
  da:	9c 60       	ori	r25, 0x0C	; 12
  dc:	95 bb       	out	0x15, r25	; 21
  de:	e9 ef       	ldi	r30, 0xF9	; 249
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_writeChar+0x10>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_writeChar+0x16>
  e8:	00 00       	nop
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
  ee:	f0 e1       	ldi	r31, 0x10	; 16
  f0:	8f 9f       	mul	r24, r31
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C; // data (RS=1), // start (EN=1)
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8c 60       	ori	r24, 0x0C	; 12
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_writeChar+0x30>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_writeChar+0x36>
 108:	00 00       	nop
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop // (EN=0 RS=0)
 10a:	15 ba       	out	0x15, r1	; 21
 10c:	08 95       	ret

0000010e <init_lcd>:
 10e:	2f e5       	ldi	r18, 0x5F	; 95
 110:	8a ee       	ldi	r24, 0xEA	; 234
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <init_lcd+0x6>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <init_lcd+0x10>
 11e:	00 00       	nop
//
void init_lcd(void)
{
	_delay_ms(300); // wait 10 ms
	// return home
	lcd_command( 0x02 );
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	bd df       	rcall	.-134    	; 0x9e <lcd_command>
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	93 e1       	ldi	r25, 0x13	; 19
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <init_lcd+0x1a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <init_lcd+0x20>
 12e:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	b5 df       	rcall	.-150    	; 0x9e <lcd_command>
 134:	87 e8       	ldi	r24, 0x87	; 135
 136:	93 e1       	ldi	r25, 0x13	; 19
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <init_lcd+0x2a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <init_lcd+0x30>
 13e:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	ad df       	rcall	.-166    	; 0x9e <lcd_command>
 144:	87 e8       	ldi	r24, 0x87	; 135
 146:	93 e1       	ldi	r25, 0x13	; 19
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <init_lcd+0x3a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <init_lcd+0x40>
 14e:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	a5 df       	rcall	.-182    	; 0x9e <lcd_command>
 154:	87 e8       	ldi	r24, 0x87	; 135
 156:	93 e1       	ldi	r25, 0x13	; 19
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <init_lcd+0x4a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <init_lcd+0x50>
 15e:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	9d df       	rcall	.-198    	; 0x9e <lcd_command>
 164:	8f e4       	ldi	r24, 0x4F	; 79
 166:	93 ec       	ldi	r25, 0xC3	; 195
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <init_lcd+0x5a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <init_lcd+0x60>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <main>:
	
}

int main(void)
{
	DDRC = 0b11111111;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	84 bb       	out	0x14, r24	; 20

	init_lcd();
 176:	cb df       	rcall	.-106    	; 0x10e <init_lcd>

	lcd_writeChar(0x52);
 178:	82 e5       	ldi	r24, 0x52	; 82
 17a:	ab df       	rcall	.-170    	; 0xd2 <lcd_writeChar>
 17c:	87 e8       	ldi	r24, 0x87	; 135
 17e:	93 e1       	ldi	r25, 0x13	; 19
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xe>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x14>
 186:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	lcd_writeChar(0x65);
 188:	85 e6       	ldi	r24, 0x65	; 101
 18a:	a3 df       	rcall	.-186    	; 0xd2 <lcd_writeChar>
 18c:	87 e8       	ldi	r24, 0x87	; 135
 18e:	93 e1       	ldi	r25, 0x13	; 19
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x1e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x24>
 196:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	lcd_writeChar(0x6D);
 198:	8d e6       	ldi	r24, 0x6D	; 109
 19a:	9b df       	rcall	.-202    	; 0xd2 <lcd_writeChar>
 19c:	87 e8       	ldi	r24, 0x87	; 135
 19e:	93 e1       	ldi	r25, 0x13	; 19
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x2e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x34>
 1a6:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	lcd_writeChar(0x63);
 1a8:	83 e6       	ldi	r24, 0x63	; 99
 1aa:	93 df       	rcall	.-218    	; 0xd2 <lcd_writeChar>
 1ac:	87 e8       	ldi	r24, 0x87	; 135
 1ae:	93 e1       	ldi	r25, 0x13	; 19
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x3e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x44>
 1b6:	00 00       	nop
	_delay_ms(20); // wait 10 ms
	lcd_writeChar(0x30);
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	8b df       	rcall	.-234    	; 0xd2 <lcd_writeChar>


    /* Replace with your application code */
    while (1) 
    {
    }
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <main+0x4a>

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
