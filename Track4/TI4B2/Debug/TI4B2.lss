
TI4B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021b  00000000  00000000  00000953  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000220  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000485  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	20 d0       	rcall	.+64     	; 0xea <main>
  aa:	67 c0       	rjmp	.+206    	; 0x17a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
		setBlue(blue);
		wait(200);
		blue--;
		fadeInBlue(blue);
	}
}
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	e9 ef       	ldi	r30, 0xF9	; 249
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <timer1Init>:
  d0:	1b bc       	out	0x2b, r1	; 43
  d2:	1a bc       	out	0x2a, r1	; 42
  d4:	19 bc       	out	0x29, r1	; 41
  d6:	18 bc       	out	0x28, r1	; 40
  d8:	10 92 79 00 	sts	0x0079, r1
  dc:	10 92 78 00 	sts	0x0078, r1
  e0:	89 ea       	ldi	r24, 0xA9	; 169
  e2:	8f bd       	out	0x2f, r24	; 47
  e4:	8b e0       	ldi	r24, 0x0B	; 11
  e6:	8e bd       	out	0x2e, r24	; 46
  e8:	08 95       	ret

000000ea <main>:


// Main program: Counting on T1
int main( void )
{
	DDRB = 0xFF;					// set PORTB for compare output 
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  ee:	f0 df       	rcall	.-32     	; 0xd0 <timer1Init>
	wait(100);
  f0:	84 e6       	ldi	r24, 0x64	; 100
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	dc df       	rcall	.-72     	; 0xae <wait>
{
	OCR1A = red;
}
void setGreen( unsigned char green)
 {
	OCR1B = green;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	99 bd       	out	0x29, r25	; 41
  fc:	88 bd       	out	0x28, r24	; 40
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
  fe:	9b bd       	out	0x2b, r25	; 43
 100:	8a bd       	out	0x2a, r24	; 42
 {
	OCR1B = green;
 }
void setBlue( unsigned char blue)
 {
	OCR1C = blue;
 102:	90 93 79 00 	sts	0x0079, r25
 106:	80 93 78 00 	sts	0x0078, r24

		wait(1000);		
		*/

		/* ## Opdracht TI4B2.c  */
		for(int red = 255; red >= 0; red--)
 10a:	ee 24       	eor	r14, r14
 10c:	ea 94       	dec	r14
 10e:	f1 2c       	mov	r15, r1
 {
	OCR1B = green;
 }
void setBlue( unsigned char blue)
 {
	OCR1C = blue;
 110:	08 e7       	ldi	r16, 0x78	; 120
 112:	10 e0       	ldi	r17, 0x00	; 0

		wait(1000);		
		*/

		/* ## Opdracht TI4B2.c  */
		for(int red = 255; red >= 0; red--)
 114:	ce 2d       	mov	r28, r14
 116:	df 2d       	mov	r29, r15
 118:	8c 2f       	mov	r24, r28
 11a:	80 95       	com	r24
{
	OCR1A = red;
}
void setGreen( unsigned char green)
 {
	OCR1B = green;
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	99 bd       	out	0x29, r25	; 41
 120:	88 bd       	out	0x28, r24	; 40
 122:	ce 01       	movw	r24, r28
 124:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 126:	9b bd       	out	0x2b, r25	; 43
 128:	8a bd       	out	0x2a, r24	; 42
		/* ## Opdracht TI4B2.c  */
		for(int red = 255; red >= 0; red--)
		{
			setGreen(255 - red);
			setRed(red);
			wait(100);
 12a:	84 e6       	ldi	r24, 0x64	; 100
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	bf df       	rcall	.-130    	; 0xae <wait>

		wait(1000);		
		*/

		/* ## Opdracht TI4B2.c  */
		for(int red = 255; red >= 0; red--)
 130:	21 97       	sbiw	r28, 0x01	; 1
 132:	90 f7       	brcc	.-28     	; 0x118 <main+0x2e>
 134:	ce 2d       	mov	r28, r14
 136:	df 2d       	mov	r29, r15
 138:	8c 2f       	mov	r24, r28
 13a:	80 95       	com	r24
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9b bd       	out	0x2b, r25	; 43
 140:	8a bd       	out	0x2a, r24	; 42
 142:	ce 01       	movw	r24, r28
 144:	99 27       	eor	r25, r25
 {
	OCR1B = green;
 }
void setBlue( unsigned char blue)
 {
	OCR1C = blue;
 146:	f8 01       	movw	r30, r16
 148:	91 83       	std	Z+1, r25	; 0x01
 14a:	80 83       	st	Z, r24
		
		for(int blue = 255; blue >= 0; blue--)
		{
			setRed(255 - blue);
			setBlue(blue);
			wait(100);
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ae df       	rcall	.-164    	; 0xae <wait>
			setGreen(255 - red);
			setRed(red);
			wait(100);
		}
		
		for(int blue = 255; blue >= 0; blue--)
 152:	21 97       	sbiw	r28, 0x01	; 1
 154:	88 f7       	brcc	.-30     	; 0x138 <main+0x4e>
 156:	ce 2d       	mov	r28, r14
 158:	df 2d       	mov	r29, r15
 15a:	8c 2f       	mov	r24, r28
 15c:	80 95       	com	r24
 {
	OCR1B = green;
 }
void setBlue( unsigned char blue)
 {
	OCR1C = blue;
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	f8 01       	movw	r30, r16
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	80 83       	st	Z, r24
 166:	ce 01       	movw	r24, r28
 168:	99 27       	eor	r25, r25
{
	OCR1A = red;
}
void setGreen( unsigned char green)
 {
	OCR1B = green;
 16a:	99 bd       	out	0x29, r25	; 41
 16c:	88 bd       	out	0x28, r24	; 40

		for(int green = 255; green >= 0; green--)
		{
			setBlue(255- green);
			setGreen(green);
			wait(100);
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9d df       	rcall	.-198    	; 0xae <wait>
			setRed(255 - blue);
			setBlue(blue);
			wait(100);
		}

		for(int green = 255; green >= 0; green--)
 174:	21 97       	sbiw	r28, 0x01	; 1
 176:	88 f7       	brcc	.-30     	; 0x15a <main+0x70>
 178:	cd cf       	rjmp	.-102    	; 0x114 <main+0x2a>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
