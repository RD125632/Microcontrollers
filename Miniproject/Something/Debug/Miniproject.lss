
Miniproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  000002c8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800170  00800170  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000672  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c7  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000430  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000239  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a7  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ec       	ldi	r30, 0xC8	; 200
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 37       	cpi	r26, 0x70	; 112
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e7       	ldi	r26, 0x70	; 112
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 37       	cpi	r26, 0x72	; 114
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d3 d0       	rcall	.+422    	; 0x26a <main>
  c4:	ff c0       	rjmp	.+510    	; 0x2c4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_start>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x20 | 0x04);
  c8:	84 ea       	ldi	r24, 0xA4	; 164
  ca:	80 93 74 00 	sts	0x0074, r24
	while( 0x00 == (TWCR & 0x80) );
  ce:	e4 e7       	ldi	r30, 0x74	; 116
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	ec f7       	brge	.-6      	; 0xd2 <twi_start+0xa>
}
  d8:	08 95       	ret

000000da <twi_stop>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  da:	84 e9       	ldi	r24, 0x94	; 148
  dc:	80 93 74 00 	sts	0x0074, r24
  e0:	08 95       	ret

000000e2 <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
  e2:	80 93 73 00 	sts	0x0073, r24
	TWCR = (0x80 | 0x04);
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 74 00 	sts	0x0074, r24
	while( 0 == (TWCR & 0x80) );
  ec:	e4 e7       	ldi	r30, 0x74	; 116
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <twi_tx+0xe>
}
  f6:	08 95       	ret

000000f8 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  f8:	18 16       	cp	r1, r24
  fa:	19 06       	cpc	r1, r25
  fc:	6c f4       	brge	.+26     	; 0x118 <wait+0x20>
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	e9 ef       	ldi	r30, 0xF9	; 249
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <wait+0xe>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <wait+0x14>
 10c:	00 00       	nop
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	a9 f7       	brne	.-22     	; 0x102 <wait+0xa>
 118:	08 95       	ret

0000011a <twi_init>:
inputs:			
outputs:	
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
	TWSR = 0;	 // CPU clock/(16 + 2 * TWBR * (4^TWSR))
 120:	10 92 71 00 	sts	0x0071, r1
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	80 93 70 00 	sts	0x0070, r24

	// Init HT16K22. Page 32 datasheet
	twi_start();
 12a:	ce df       	rcall	.-100    	; 0xc8 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 12c:	80 ee       	ldi	r24, 0xE0	; 224
 12e:	d9 df       	rcall	.-78     	; 0xe2 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 130:	81 e2       	ldi	r24, 0x21	; 33
 132:	d7 df       	rcall	.-82     	; 0xe2 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 134:	c4 e7       	ldi	r28, 0x74	; 116
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	14 e9       	ldi	r17, 0x94	; 148
 13a:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 13c:	c5 df       	rcall	.-118    	; 0xc8 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 13e:	80 ee       	ldi	r24, 0xE0	; 224
 140:	d0 df       	rcall	.-96     	; 0xe2 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 142:	80 ea       	ldi	r24, 0xA0	; 160
 144:	ce df       	rcall	.-100    	; 0xe2 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 146:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 148:	bf df       	rcall	.-130    	; 0xc8 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 14a:	80 ee       	ldi	r24, 0xE0	; 224
 14c:	ca df       	rcall	.-108    	; 0xe2 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 14e:	83 ee       	ldi	r24, 0xE3	; 227
 150:	c8 df       	rcall	.-112    	; 0xe2 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 152:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 154:	b9 df       	rcall	.-142    	; 0xc8 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 156:	80 ee       	ldi	r24, 0xE0	; 224
 158:	c4 df       	rcall	.-120    	; 0xe2 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 15a:	81 e8       	ldi	r24, 0x81	; 129
 15c:	c2 df       	rcall	.-124    	; 0xe2 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 15e:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();

	wait(1000);
 160:	88 ee       	ldi	r24, 0xE8	; 232
 162:	93 e0       	ldi	r25, 0x03	; 3
 164:	c9 df       	rcall	.-110    	; 0xf8 <wait>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	08 95       	ret

0000016e <twi_data>:
	{0x00, 0b11111111}, {0x02, 0b11000000}, {0x04, 0b11011110}, {0x06, 0b11010010}, {0x08, 0b11010010}, {0x0A, 0b11011110}, {0x0C, 0b11000000}, {0x0E, 0b11111111}
};


void twi_data(PATTERN_STRUCT pattern[]) //geeft een simpele pattern weer
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	8c 01       	movw	r16, r24
	twi_start();
 178:	a7 df       	rcall	.-178    	; 0xc8 <twi_start>
	twi_tx(0xE0);
 17a:	80 ee       	ldi	r24, 0xE0	; 224
 17c:	b2 df       	rcall	.-156    	; 0xe2 <twi_tx>
 17e:	e8 01       	movw	r28, r16
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	0f 5e       	subi	r16, 0xEF	; 239
 184:	1f 4f       	sbci	r17, 0xFF	; 255
 186:	fe 01       	movw	r30, r28
 188:	31 97       	sbiw	r30, 0x01	; 1
	for (int i = 0; i < 8; i++)
	{
		twi_tx(pattern[i].address);
 18a:	80 81       	ld	r24, Z
 18c:	aa df       	rcall	.-172    	; 0xe2 <twi_tx>
		twi_tx(pattern[i].data);
 18e:	88 81       	ld	r24, Y
 190:	a8 df       	rcall	.-176    	; 0xe2 <twi_tx>
 192:	22 96       	adiw	r28, 0x02	; 2

void twi_data(PATTERN_STRUCT pattern[]) //geeft een simpele pattern weer
{
	twi_start();
	twi_tx(0xE0);
	for (int i = 0; i < 8; i++)
 194:	c0 17       	cp	r28, r16
 196:	d1 07       	cpc	r29, r17
 198:	b1 f7       	brne	.-20     	; 0x186 <twi_data+0x18>
	{
		twi_tx(pattern[i].address);
		twi_tx(pattern[i].data);
	}
	twi_stop();
 19a:	9f df       	rcall	.-194    	; 0xda <twi_stop>
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <twi_data_inverse>:

void twi_data_inverse(PATTERN_STRUCT pattern[]) //geeft pattern weer (inverted) nog niet getest!
{
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	8c 01       	movw	r16, r24
	twi_start();
 1b0:	8b df       	rcall	.-234    	; 0xc8 <twi_start>
	twi_tx(0xE0);
 1b2:	80 ee       	ldi	r24, 0xE0	; 224
 1b4:	96 df       	rcall	.-212    	; 0xe2 <twi_tx>
 1b6:	e8 01       	movw	r28, r16
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	0f 5e       	subi	r16, 0xEF	; 239
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	fe 01       	movw	r30, r28
 1c0:	31 97       	sbiw	r30, 0x01	; 1
	for (int i = 0; i < 8; i++)
	{
		twi_tx(pattern[i].address);
 1c2:	80 81       	ld	r24, Z
 1c4:	8e df       	rcall	.-228    	; 0xe2 <twi_tx>
		twi_tx(pattern[i].data |~(0xFF));
 1c6:	88 81       	ld	r24, Y
 1c8:	8c df       	rcall	.-232    	; 0xe2 <twi_tx>
 1ca:	22 96       	adiw	r28, 0x02	; 2

void twi_data_inverse(PATTERN_STRUCT pattern[]) //geeft pattern weer (inverted) nog niet getest!
{
	twi_start();
	twi_tx(0xE0);
	for (int i = 0; i < 8; i++)
 1cc:	c0 17       	cp	r28, r16
 1ce:	d1 07       	cpc	r29, r17
 1d0:	b1 f7       	brne	.-20     	; 0x1be <twi_data_inverse+0x18>
	{
		twi_tx(pattern[i].address);
		twi_tx(pattern[i].data |~(0xFF));
	}
	twi_stop();
 1d2:	83 df       	rcall	.-250    	; 0xda <twi_stop>
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <twi_data3>:

void twi_data3() //geeft animatie weer (brainfart pattern)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	twi_start();
 1e2:	72 df       	rcall	.-284    	; 0xc8 <twi_start>
	twi_tx(0xE0);
 1e4:	80 ee       	ldi	r24, 0xE0	; 224
 1e6:	7d df       	rcall	.-262    	; 0xe2 <twi_tx>

	for (int i = 0; i < 8; i++)
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
	{
		twi_tx(brainfart[i + index * 8].address);
 1ec:	e0 91 70 01 	lds	r30, 0x0170
 1f0:	f0 91 71 01 	lds	r31, 0x0171
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	ee 0f       	add	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e0 50       	subi	r30, 0x00	; 0
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 81       	ld	r24, Z
 20e:	69 df       	rcall	.-302    	; 0xe2 <twi_tx>
		twi_tx(brainfart[i + index * 8].data);
 210:	e0 91 70 01 	lds	r30, 0x0170
 214:	f0 91 71 01 	lds	r31, 0x0171
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	ec 0f       	add	r30, r28
 226:	fd 1f       	adc	r31, r29
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e0 50       	subi	r30, 0x00	; 0
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	81 81       	ldd	r24, Z+1	; 0x01
 232:	57 df       	rcall	.-338    	; 0xe2 <twi_tx>
void twi_data3() //geeft animatie weer (brainfart pattern)
{
	twi_start();
	twi_tx(0xE0);

	for (int i = 0; i < 8; i++)
 234:	21 96       	adiw	r28, 0x01	; 1
 236:	c8 30       	cpi	r28, 0x08	; 8
 238:	d1 05       	cpc	r29, r1
 23a:	c1 f6       	brne	.-80     	; 0x1ec <twi_data3+0xe>
	{
		twi_tx(brainfart[i + index * 8].address);
		twi_tx(brainfart[i + index * 8].data);
	}
	index++;
 23c:	80 91 70 01 	lds	r24, 0x0170
 240:	90 91 71 01 	lds	r25, 0x0171
 244:	01 96       	adiw	r24, 0x01	; 1
	if(index > 4)
 246:	85 30       	cpi	r24, 0x05	; 5
 248:	91 05       	cpc	r25, r1
 24a:	2c f4       	brge	.+10     	; 0x256 <twi_data3+0x78>
	for (int i = 0; i < 8; i++)
	{
		twi_tx(brainfart[i + index * 8].address);
		twi_tx(brainfart[i + index * 8].data);
	}
	index++;
 24c:	90 93 71 01 	sts	0x0171, r25
 250:	80 93 70 01 	sts	0x0170, r24
 254:	06 c0       	rjmp	.+12     	; 0x262 <twi_data3+0x84>
	if(index > 4)
	{
		index = 3;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	90 93 71 01 	sts	0x0171, r25
 25e:	80 93 70 01 	sts	0x0170, r24
	}
	twi_stop();
 262:	3b df       	rcall	.-394    	; 0xda <twi_stop>
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	twi_init();		// Init TWI interface
 26a:	57 df       	rcall	.-338    	; 0x11a <twi_init>

	twi_start();
 26c:	2d df       	rcall	.-422    	; 0xc8 <twi_start>
	twi_tx(0xE0);
 26e:	80 ee       	ldi	r24, 0xE0	; 224
 270:	38 df       	rcall	.-400    	; 0xe2 <twi_tx>
	twi_tx(0x00);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	36 df       	rcall	.-404    	; 0xe2 <twi_tx>
 276:	c0 e1       	ldi	r28, 0x10	; 16
 278:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 16; i++)
	{
		twi_tx(0x00);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	32 df       	rcall	.-412    	; 0xe2 <twi_tx>
 27e:	21 97       	sbiw	r28, 0x01	; 1
	twi_init();		// Init TWI interface

	twi_start();
	twi_tx(0xE0);
	twi_tx(0x00);
	for(int i = 0; i < 16; i++)
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x10>
	{
		twi_tx(0x00);
	}
	twi_stop();
 282:	2b df       	rcall	.-426    	; 0xda <twi_stop>
	DDRA = 0x00; //input open on port A
 284:	1a ba       	out	0x1a, r1	; 26
	index = 0;
 286:	10 92 71 01 	sts	0x0171, r1
 28a:	10 92 70 01 	sts	0x0170, r1

	while (1)
	{
		wait(750);
 28e:	8e ee       	ldi	r24, 0xEE	; 238
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	32 df       	rcall	.-412    	; 0xf8 <wait>
		if(PINA & 0x01)
 294:	c8 9b       	sbis	0x19, 0	; 25
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <main+0x36>
		{
			twi_data(downey);
 298:	80 e5       	ldi	r24, 0x50	; 80
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	68 df       	rcall	.-304    	; 0x16e <twi_data>
 29e:	f7 cf       	rjmp	.-18     	; 0x28e <main+0x24>
		}
		else if(PINA & 0x02)
 2a0:	c9 9b       	sbis	0x19, 1	; 25
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <main+0x3e>
		{
			twi_data3();
 2a4:	9c df       	rcall	.-200    	; 0x1de <twi_data3>
 2a6:	f3 cf       	rjmp	.-26     	; 0x28e <main+0x24>
		}
		else if(PINA & 0x04)
 2a8:	ca 9b       	sbis	0x19, 2	; 25
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <main+0x4a>
		{
			twi_data_inverse(smiley);
 2ac:	80 e6       	ldi	r24, 0x60	; 96
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	7a df       	rcall	.-268    	; 0x1a6 <twi_data_inverse>
 2b2:	ed cf       	rjmp	.-38     	; 0x28e <main+0x24>
		}
		else
		{
			twi_data(smiley);
 2b4:	80 e6       	ldi	r24, 0x60	; 96
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	5a df       	rcall	.-332    	; 0x16e <twi_data>
			index = 0;
 2ba:	10 92 71 01 	sts	0x0171, r1
 2be:	10 92 70 01 	sts	0x0170, r1
 2c2:	e5 cf       	rjmp	.-54     	; 0x28e <main+0x24>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
