
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002da  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022a  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000292  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000089  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	13 d0       	rcall	.+38     	; 0xd0 <main>
  aa:	45 c0       	rjmp	.+138    	; 0x136 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	e9 ef       	ldi	r30, 0xF9	; 249
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <main>:
}

// Main program: USART0: send & receive
int main( void )
{
	DDRB = 0xFF;							// set PORTB for output, for testing
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;							// set PORTA for output, for testing
  d4:	8a bb       	out	0x1a, r24	; 26
	usart0_init();							// initialize USART0
  d6:	18 d0       	rcall	.+48     	; 0x108 <usart0_init>
	usart0_start();							// uart0: start send & receive
  d8:	20 d0       	rcall	.+64     	; 0x11a <usart0_start>

	while (1)
	{
		wait(50);							// every 50 ms (busy waiting)
  da:	82 e3       	ldi	r24, 0x32	; 50
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	e7 df       	rcall	.-50     	; 0xae <wait>
		PORTB ^= BIT(7);					// toggle bit 7 for testing
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	80 58       	subi	r24, 0x80	; 128
  e4:	88 bb       	out	0x18, r24	; 24

		character = uart0_receiveChar();	// read char
  e6:	23 d0       	rcall	.+70     	; 0x12e <uart0_receiveChar>
  e8:	80 93 00 01 	sts	0x0100, r24
		PORTA = character;					// show read character, for testing
  ec:	8b bb       	out	0x1b, r24	; 27
		if(character > 96 && character < 123)
  ee:	80 91 00 01 	lds	r24, 0x0100
  f2:	9f e9       	ldi	r25, 0x9F	; 159
  f4:	98 0f       	add	r25, r24
  f6:	9a 31       	cpi	r25, 0x1A	; 26
  f8:	18 f4       	brcc	.+6      	; 0x100 <main+0x30>
		character = character - 32;
  fa:	80 52       	subi	r24, 0x20	; 32
  fc:	80 93 00 01 	sts	0x0100, r24
		uart0_sendChar(character);			// send back
 100:	80 91 00 01 	lds	r24, 0x0100
 104:	0e d0       	rcall	.+28     	; 0x122 <uart0_sendChar>
	}
 106:	e9 cf       	rjmp	.-46     	; 0xda <main+0xa>

00000108 <usart0_init>:
 #define BIT(x)		(1 << (x))

 void usart0_init( void )						// initialize USART0 - receive/transmit
 {
	 int ubrr = MYUBRR;
	 UBRR0H = ubrr>>8;						// baudrate register, hoge byte
 108:	10 92 90 00 	sts	0x0090, r1
	 UBRR0L = ubrr;							// baudrate register, lage byte
 10c:	83 e3       	ldi	r24, 0x33	; 51
 10e:	89 b9       	out	0x09, r24	; 9
	 UCSR0C = 0b00000110;					// asynchroon, 8 data - 1 stop - no parity
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 93 95 00 	sts	0x0095, r24
	 UCSR0B = 0b00000000;					// receiver & transmitter enable
 116:	1a b8       	out	0x0a, r1	; 10
 118:	08 95       	ret

0000011a <usart0_start>:
 }

 void usart0_start( void )					// receiver & transmitter enable
 {
	 UCSR0B |= BIT(RXEN)|BIT(TXEN);			// set bit RXEN = Receiver enable and TXEN = Transmitter enable
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	88 61       	ori	r24, 0x18	; 24
 11e:	8a b9       	out	0x0a, r24	; 10
 120:	08 95       	ret

00000122 <uart0_sendChar>:
 }

 int uart0_sendChar( char ch )
 {
	 while (!(UCSR0A & BIT(UDRE0))) ;		// wait until UDRE0 is set: transmit buffer is ready
 122:	5d 9b       	sbis	0x0b, 5	; 11
 124:	fe cf       	rjmp	.-4      	; 0x122 <uart0_sendChar>
	 UDR0 = ch;								// send ch
 126:	8c b9       	out	0x0c, r24	; 12
	 return 0;								// OK
 }
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret

0000012e <uart0_receiveChar>:

 char uart0_receiveChar( void )
 {
	 while (!(UCSR0A & BIT(RXC0))) ;			// if RX0 is set: unread data present in buffer
 12e:	5f 9b       	sbis	0x0b, 7	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <uart0_receiveChar>
	 return UDR0;							// read ch
 132:	8c b1       	in	r24, 0x0c	; 12
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
